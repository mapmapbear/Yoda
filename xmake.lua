add_rules("mode.debug")
if is_mode("debug") then
    add_defines("DEBUG")
end 
add_ldflags("/subsystem:windows")
package("glfw")
    add_deps("cmake")
    set_sourcedir(path.join(os.scriptdir(), "external/glfw"))
    on_install(function (package)
        local configs = {}
        table.insert(configs, "-DCMAKE_BUILD_TYPE=" .. (package:debug() and "Debug" or "Release"))
        table.insert(configs, "-DBUILD_SHARED_LIBS=" .. (package:config("shared") and "ON" or "OFF"))
        import("package.tools.cmake").install(package, configs)
    end)
package_end()

package("spdlog")
    add_deps("cmake")
    set_sourcedir(path.join(os.scriptdir(), "external/spdlog"))
    on_install(function (package)
        local configs = {}
        table.insert(configs, "-DCMAKE_BUILD_TYPE=" .. (package:debug() and "Debug" or "Release"))
        table.insert(configs, "-DBUILD_SHARED_LIBS=" .. (package:config("shared") and "ON" or "OFF"))
        import("package.tools.cmake").install(package, configs)
    end)
package_end()

package("directx_headers")
    add_deps("cmake")
    set_sourcedir(path.join(os.scriptdir(), "external/directx_headers"))
    on_install(function (package)
        local configs = {}
        table.insert(configs, "-DCMAKE_BUILD_TYPE=" .. (package:debug() and "Debug" or "Release"))
        table.insert(configs, "-DBUILD_SHARED_LIBS=" .. (package:config("shared") and "ON" or "OFF"))
        import("package.tools.cmake").install(package, configs)
    end)
package_end()

package("d3d12ma")
    add_deps("cmake")
    set_sourcedir(path.join(os.scriptdir(), "external/d3d12ma"))
    on_install(function (package)
        local configs = {}
        table.insert(configs, "-DCMAKE_BUILD_TYPE=" .. (package:debug() and "Debug" or "Release"))
        table.insert(configs, "-DBUILD_SHARED_LIBS=" .. (package:config("shared") and "ON" or "OFF"))
        import("package.tools.cmake").install(package, configs)
    end)
package_end()

add_requires("spdlog")
add_requires("glfw")
add_requires("directx_headers")
add_requires("d3d12ma")
add_requires("dxcompiler")

target("ImGui")
    add_includedirs("external/imgui")
    set_kind("static")
    add_files("external/imgui/*.cpp")
    add_files("external/imgui/backends/imgui_impl_win32.cpp")
    add_files("external/imgui/backends/imgui_impl_dx12.cpp")
    add_files("external/imgui/backends/imgui_impl_glfw.cpp")
    add_includedirs("external/glfw/include")
    add_headerfiles("external/imgui/**.h")
    add_syslinks("d3d12", "dxgi")


target("sandbox")
    set_languages("c++20")
    add_files("src/application/*.cpp")
    add_files("src/core/*.cpp")
    add_files("src/render/*.cpp")
    add_files("src/rhi/d3d12/*.cpp")
    add_files("src/main.cpp")
    add_headerfiles("src/core/*.h")
    add_headerfiles("src/application/*.h")
    add_headerfiles("src/render/*.h")
    add_headerfiles("src/rhi/d3d12/*.h")
    add_includedirs("src")
    add_includedirs("external/glfw/include")
    add_includedirs("external/imgui")
    add_includedirs("external/spdlog/include")
    add_includedirs("external/directx_headers/include/directx")
    add_includedirs("external/d3d12ma/include")
    add_packages("glfw")
    add_packages("spdlog")
    add_packages("d3d12ma")
    add_packages("dxcompiler")
    add_packages("directx_headers")
    add_deps("ImGui")
    if is_plat("windows") then
        add_syslinks("user32", "kernel32", "gdi32", "shell32", "dxgi", "d3d12")
    end